AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  test

  Sample SAM Template for test

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  TableName:
    Type: String
    Default: 'sls_rtc_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

  ApigwEndpoint:
    Type: String
    Default: 'https://api.hogehoge-banana.xyz/slsrtc'

  RetentionInDays:
    Type: Number
    Default: 90

Resources:

  SlsRtcWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebRtcSignalingApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # WsApiStage:
  #   Type: AWS::ApiGatewayV2::Stage
  #   Properties:
  #     StageName: Prod
  #     Description: Prod Stage
  #     DeploymentId: !Ref Deployment
  #     ApiId: !Ref SlsRtcWebSocket

  # SlsRtcWebSocketMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   Properties:
  #     ApiId: !Ref SlsRtcWebSocket
  #     ApiMappingKey: slsrtc
  #     DomainName: api.hogehoge-banana.xyz
  #     Stage: !Ref WsApiStage

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    - MessageRoute
    - CreateRoomRoute
    - EnterRoomRoute
    Properties:
      ApiId: !Ref SlsRtcWebSocket

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations

  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SlsRtcWebSocket
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations

  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SlsRtcWebSocket
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      RouteKey: message
      AuthorizationType: NON
      OperationName: MessageRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref MessageInteg

  MessageInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations

  MessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SlsRtcWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com

  CreateRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      RouteKey: createroom
      AuthorizationType: NONE
      OperationName: CreateRoomRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref CreateRoomInteg

  CreateRoomInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      Description: create room api
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRoomFunction.Arn}/invocations

  CreateRoomPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SlsRtcWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateRoomFunction
      Principal: apigateway.amazonaws.com


  EnterRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      RouteKey: enterroom
      AuthorizationType: NONE
      OperationName: EnterRoomRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref EnterRoomInteg

  EnterRoomInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SlsRtcWebSocket
      Description: enter room api
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EnterRoomFunction.Arn}/invocations

  EnterRoomPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SlsRtcWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EnterRoomFunction
      Principal: apigateway.amazonaws.com

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "roomID"
          AttributeType: "S"

      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"

      GlobalSecondaryIndexes:
        - IndexName: "RoomMate"
          KeySchema:
            - AttributeName: "roomID"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "userName"
              - connectionID
            ProjectionType: "INCLUDE"

      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableName
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiredAt
        Enabled: true

  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/streamhandler/
      Handler: streamhandler
      Runtime: go1.x
      Policies: AWSLambdaDynamoDBExecutionRole
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          APIGW_ENDPOINT: !Ref ApigwEndpoint
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt ConnectionsTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SlsRtcWebSocket}/*'

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/connect/
      Handler: connect
      MemorySize: 128
      Runtime: go1.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/disconnect/
      Handler: disconnect
      MemorySize: 128
      Runtime: go1.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName

  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/message/
      Handler: message
      MemorySize: 256
      Runtime: go1.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          APIGW_ENDPOINT: !Ref ApigwEndpoint
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SlsRtcWebSocket}/*'

  CreateRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/createroom/
      Handler: createroom
      MemorySize: 128
      Runtime: go1.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
          APIGW_ENDPOINT: !Ref ApigwEndpoint
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SlsRtcWebSocket}/*'

  EnterRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cmd/enterroom/
      Handler: enterroom
      MemorySize: 128
      Runtime: go1.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref TableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SlsRtcWebSocket}/*'

  # RestApi:
  #   Type: AWS::ApiGatewayV2::Api
  #   Properties:
  #     Name: SlsRtc RestApi
  #     Description: SlsRtc rest api
  #     ProtocolType: HTTP
      # Target:
      #   !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFunction.Arn}/invocations"

  # RestApiStage:
  #   Type: AWS::ApiGatewayV2::Stage
  #   Properties:
  #     StageName: Prod
  #     Description: Prod Stage
  #     # DeploymentId: !Ref Deployment
  #     ApiId: !Ref RestApi

  RestApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      # ReservedConcurrentExecutions: 30
      Tracing: Active
      Timeout: 30
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any

    Metadata:
      BuildMethod: makefile

  RestApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RestApiFunction}"
      RetentionInDays: !Ref RetentionInDays

  RestApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RestApiFunction
      Principal: apigateway.amazonaws.com

  # RestApiRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref RestApi
  #     RouteKey: $default
  #     Target: !Join
  #       - '/'
  #       - - 'integrations'
  #         - !Ref EnterRoomInteg

  # RestApiInteg:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref RestApi
  #     Description: catch all
  #     IntegrationType: AWS_PROXY
  #     IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiFunction.Arn}/invocations"
  #     PayloadFormatVersion: 1.0

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  # WebSocketURI:
  #   Description: "The WSS Protocol URI to connect to"
  #   Value: !Join [ '', [ 'wss://', !Ref SlsRtcWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'WsApiStage'] ]

  # RestApiURI:
  #   Description: "The Rest Api Endpoint"
  #   Value: !GetAtt RestApi.ApiEndpoint
